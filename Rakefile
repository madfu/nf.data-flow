require 'fileutils'

ENV['FrameworkPathOverride'] = '/Library/Frameworks/Mono.framework/Versions/Current/lib/mono/4.6-api/'

ROOT = Dir.pwd
BUILD_DIR = "#{ROOT}/__BUILD"

INPUT_EXCEL_FPATH = "#{ROOT}/exels/sample.xlsx"
TEMPLATE_DIR      = "#{ROOT}/solution/AutoGenerated.DB/template"
OUTPUT_CS_DIR     = "#{ROOT}/solution/AutoGenerated.DB/output"
GEN_DLL_FPATH     = "#{ROOT}/solution/AutoGenerated.DB/bin/Debug/net46/AutoGenerated.DB.dll"
GEN_DB_FPATH      = "#{BUILD_DIR}/DB.db"
PASSWORD          = "helloworld"


# DOTNET_RUN = "dotnet mono run"
DOTNET_RUN32 = 'dotnet mono -f net46 -mo="--arch=32 --debug" --loggerlevel Verbose'
# DOTNET_RUN64 = 'dotnet mono -f net462  -mo="--arch=64 --debug"'
DOTNET_RUN = 'dotnet mono -f net46 -mo="--arch=64 --debug"'


desc("generate db & dll")
task :default do
  FileUtils::mkdir_p BUILD_DIR
  Dir.chdir('solution') do
    Dir.chdir('NF.CLI.ClassGenerator') do
      sh 'dotnet restore'
      args = "-e #{INPUT_EXCEL_FPATH} -t #{TEMPLATE_DIR} -o #{OUTPUT_CS_DIR}"
      # sh "#{DOTNET_RUN} -- #{args}"
      sh "#{DOTNET_RUN} -po=\"#{args}\""
    end

    Dir.chdir('SQLite.Attribute') do
      sh 'dotnet restore'
      sh "dotnet build"
    end

    Dir.chdir('AutoGenerated.DB') do
      sh 'dotnet restore'
      sh "dotnet build"
    end

    Dir.chdir('NF.CLI.DataExporter') do
      sh 'dotnet restore'
      args = "-d #{GEN_DLL_FPATH} -e #{INPUT_EXCEL_FPATH} -o #{GEN_DB_FPATH} -p #{PASSWORD}"
      # sh "#{DOTNET_RUN} -- #{args}"
      # sh "#{DOTNET_RUN} -po=\"#{args}\""
      sh "#{DOTNET_RUN32} -po=\"#{args}\""
    end
p  end

  cp_r "#{ROOT}/solution/AutoGenerated.DB/bin/Debug/net46/", BUILD_DIR, :preserve => true
end

desc "update unityproject"
task :update_unityproject => [:default]  do
  output = 'unity_project/Assets/output'
  mkdir_p output

  # copy db
  db_files = Dir.glob("#{BUILD_DIR}/*.db")
  db_files.each do |db|
    cp_r(db, output)
  end

  # copy autogen
  cs_files = Dir.glob("solution/AutoGenerated.*/**/{Library.cs,*.autogen.cs}")
  cs_files.each do |cs|
    dir = "#{output}/#{File.dirname(cs)}"
    mkdir_p(dir)
    puts cs
    cp_r(cs, dir)
  end

end
